# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
- name: isgSolution
  value: 'Isg.DyeDurham.NameSorter.sln'
- name: buildNumber
  value: '1.0.0'
- name: nugetBuildNumber
  value: '1.0.0'
- name: cntSdkNetCsProj
  value: 'Libraries/Isg.DyeDurham.NameSorter.Lib/Isg.DyeDurham.NameSorter.Lib.csproj'
  
trigger: 
  branches:
    include: 
    - release
    - testing
    - releasecandidate
    - develop

pool:
  vmImage: 'windows-latest'
  name: Azure Pipelines
  demands:
  - msbuild
  - visualstudio

steps:

- checkout: self
  persistCredentials: true

- task: S3Download@1
  inputs:
    awsCredentials: 'AWSCoreyStjProfile'
    regionName: 'us-east-2'
    bucketName: 'valiantversioner'
    globExpressions: 'ValiantVersioner_1.0.0.zip'
    targetFolder: '$(Build.BinariesDirectory)'
  displayName: "Downloading ValiantVersioner"

- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: '$(Build.BinariesDirectory)/ValiantVersioner_1.0.0.zip'
    destinationFolder: '$(Build.BinariesDirectory)/ValiantVersioner'
    cleanDestinationFolder: true
    overwriteExistingFiles: true
  displayName: "Extracting ValiantVersioner"

- task: S3Download@1
  inputs:
    awsCredentials: 'AWSCoreyStjProfile'
    regionName: 'us-east-2'
    bucketName: 'realmmaster'
    globExpressions: 'RealmMaster_1.0.0.zip'
    targetFolder: '$(Build.BinariesDirectory)'
  displayName: "Downloading RealmMaster"

- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: '$(Build.BinariesDirectory)/RealmMaster_1.0.0.zip'
    destinationFolder: '$(Build.BinariesDirectory)/RealmMaster'
    cleanDestinationFolder: true
    overwriteExistingFiles: true
  displayName: "Extracting RealmMaster"

- script: |
    echo Printing directories and folder structure...
    echo ""
    echo Current Source Branch Name: $(Build.SourceBranchName)
    echo ""
    echo Current build number: $(buildNumber)
    echo ""
    echo "Build.ArtifactStagingDirectory:" 
    echo "$(Build.ArtifactStagingDirectory)"
    echo ""
    echo "Build.BinariesDirectory:" 
    echo "$(Build.BinariesDirectory)"
    echo ""
    echo "Build.SourcesDirectory:"
    echo "$(Build.SourcesDirectory)"
    echo ""
    echo "Structure of work folder of this pipeline:"
  displayName: "Displaying Pipeline Details"

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
        $betaPatch = git rev-list --count 'origin/develop'
        $patchCount = git rev-list --count 'origin/testing'
        $minorCount = git rev-list --count 'origin/releasecandidate'
        $majorCount = git rev-list --count 'origin/release'

        $newBuildNumber = "$majorCount.$minorCount.$patchCount"
        $nugetNewBuildNumber = "$majorCount.$minorCount.$patchCount"
        if ( '$(Build.SourceBranchName)' -eq 'develop' )
        {
            $newBuildNumber = $newBuildNumber + "b" + $betaPatch
            $nugetNewBuildNumber = $nugetNewBuildNumber + "-beta" + $betaPatch
        }

        Write-Host "##vso[task.setvariable variable=buildNumber]$newBuildNumber"
        Write-Host "##vso[task.setvariable variable=nugetBuildNumber]$nugetNewBuildNumber"
        $(Build.BinariesDirectory)\ValiantVersioner\net6.0\Cnt.ValiantVersioner.CLI.exe -p "$(Build.SourcesDirectory)" -w true -v $newBuildNumber
  displayName: Incrementing Version Number

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
        $(Build.BinariesDirectory)\RealmMaster\net6.0\Cnt.RealmMaster.exe -v "$(Build.SourceBranchName)" -k "Branch" -f "$(Build.SourcesDirectory)" -d "appsettings.json"
        $(Build.BinariesDirectory)\RealmMaster\net6.0\Cnt.RealmMaster.exe -v "$(buildNumber)" -k "Version" -f "$(Build.SourcesDirectory)" -d "appsettings.json"
  displayName: Assigning appsettings.json

- script: |
    echo Current Build Number: $(buildNumber)
  displayName: Displaying New Version Number

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(isgSolution)'
    feedsToUse: 'config'
  displayName: 'Restoring $(isgSolution) Nuggets'

- task: VSBuild@1
  inputs:
    solution: '$(isgSolution)'
    vsVersion: '16.0'
    configuration: 'release'
  displayName: 'Building Release $(isgSolution)'

- task: VSTest@3
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*test*.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
  displayName: 'Executing Tests on $(isgSolution)'

- task: CmdLine@2
  inputs:
    script: 'name-sorter -i "unsorted-names-list.txt" -o "sorted-names-list.txt"'
    workingDirectory: '$(System.DefaultWorkingDirectory)\Tools\Isg.DyeDurham.NameSorter.CLI\bin\Release\net8.0'
  displayName: 'Executing Application'
  
  
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
        dotnet pack "$(cntSdkNetCsProj)" -c Release -o "Libraries/Isg.DyeDurham.NameSorter.Lib/" /p:Version="$(nugetBuildNumber)" /p:description="A library for sorting names." /p:creator="CyproNET Technologies S.A.S."
  displayName: 'Creating NuGet Package'

- task: S3Upload@1
  inputs:
    awsCredentials: 'AWSCoreyStjProfile'
    regionName: 'us-east-2'
    bucketName: 'cntnugetserver'
    sourceFolder: 'Libraries/Isg.DyeDurham.NameSorter.Lib/'
    globExpressions: '**.nupkg'
    targetFolder: 'Isg.DyeDurham.NameSorter.Lib'
    filesAcl: 'public-read'
    createBucket: true
  displayName: "Uploading Nugget For SDK.NET"
  
- task: Npm@1
  inputs:
    command: 'install'
    workingDir: 'Web/LandingPage/'
  displayName: "Installing NPM node modules"
  
- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Web/LandingPage/'
    customCommand: 'run build'
  displayName: "Building Web App"
  
- task: S3Upload@1
  inputs:
    awsCredentials: 'AWSCoreyStjProfile'
    regionName: 'us-east-2'
    bucketName: 'namesorter-develop'
    sourceFolder: '$(Build.SourcesDirectory)\Web\LandingPage\dist'
    globExpressions: '**/*.*'
    filesAcl: 'public-read'
  displayName: "Publishing Web App"